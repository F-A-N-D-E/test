{"ast":null,"code":"var _jsxFileName = \"D:\\\\javascript\\\\express-react-app\\\\client\\\\src\\\\FormCreate\\\\Form.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { data, useParams } from \"react-router-dom\";\nimport { nanoid } from 'nanoid';\nimport FormCSS from '../styles/Form.module.css';\nimport QUEForm from \"./QUEForm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Form() {\n  _s();\n  let params = useParams();\n  const [list, setList] = useState([{\n    id: nanoid(5),\n    type: 'radio',\n    text: '',\n    answerTrue: [[nanoid(3), '']],\n    answerFalse: [[nanoid(3), '']]\n  }]);\n  const [nameTest, setNameTest] = useState();\n  function add() {\n    let copy = [...list];\n    copy = [...copy, {\n      id: nanoid(5),\n      type: 'radio',\n      text: '',\n      answerTrue: [[nanoid(3), '']],\n      answerFalse: [[nanoid(3), '']]\n    }];\n    setList(copy);\n  }\n  function remove(id) {\n    let copy = [...list];\n    let index = copy.findIndex(elem => elem.id === id);\n    copy.splice(index, 1);\n    setList(copy);\n  }\n  async function getDataFromDB() {\n    if (params.idTest) {\n      await fetch(`/create/${params.name}/${params.idTest}`).then(r => r.json()).then(r => {\n        setList(r.data);\n        setNameTest(r.nameTest);\n      }).catch(err => console.log(err));\n    }\n  }\n  useEffect(() => {\n    getDataFromDB();\n    console.log(data);\n    /* alert('Убедитесь, чтобы все поля были заполнены. Иначе тестируемый будет выбирать верный ответ между пустым полем и пустым полем)') */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      method: \"post\",\n      onKeyDown: e => {\n        if (e.key === 'Enter') e.preventDefault();\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: FormCSS.none,\n        readOnly: true,\n        type: \"text\",\n        name: \"id\",\n        value: nanoid(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"nameTest\",\n        className: FormCSS.inp_name,\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u0441\\u0442\\u0430\",\n        autoComplete: \"off\",\n        defaultValue: nameTest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), list.map((elem, index) => {\n        return /*#__PURE__*/_jsxDEV(QUEForm, {\n          elemFromState: elem,\n          number: index,\n          remove: remove,\n          last: index === list.length - 1,\n          add: add,\n          mainList: list,\n          mainSetList: setList\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 24\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(Form, \"3LvrySvl+KxDuxWQuq52hEBHjas=\", false, function () {\n  return [useParams];\n});\n_c = Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","useEffect","data","useParams","nanoid","FormCSS","QUEForm","jsxDEV","_jsxDEV","Fragment","_Fragment","Form","_s","params","list","setList","id","type","text","answerTrue","answerFalse","nameTest","setNameTest","add","copy","remove","index","findIndex","elem","splice","getDataFromDB","idTest","fetch","name","then","r","json","catch","err","console","log","children","method","onKeyDown","e","key","preventDefault","className","none","readOnly","value","fileName","_jsxFileName","lineNumber","columnNumber","inp_name","placeholder","autoComplete","defaultValue","map","elemFromState","number","last","length","mainList","mainSetList","_c","$RefreshReg$"],"sources":["D:/javascript/express-react-app/client/src/FormCreate/Form.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { data, useParams } from \"react-router-dom\";\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport FormCSS from '../styles/Form.module.css'\r\nimport QUEForm from \"./QUEForm\";\r\n\r\nexport default function Form() {\r\n    let params = useParams()\r\n\r\n    const [list, setList] = useState([\r\n        {\r\n            id: nanoid(5),\r\n            type: 'radio',\r\n            text: '',\r\n            answerTrue: [\r\n                [nanoid(3), '']\r\n            ],\r\n            answerFalse: [\r\n                [nanoid(3), '']\r\n            ],\r\n        }\r\n    ])\r\n    const [nameTest, setNameTest] = useState()\r\n\r\n    function add() {\r\n        let copy = [...list]\r\n\r\n        copy = [...copy,\r\n        {\r\n            id: nanoid(5),\r\n            type: 'radio',\r\n            text: '',\r\n            answerTrue: [\r\n                [nanoid(3), '']\r\n            ],\r\n            answerFalse: [\r\n                [nanoid(3), '']\r\n            ],\r\n        }\r\n        ]\r\n        setList(copy)\r\n    }\r\n    function remove(id) {\r\n        let copy = [...list]\r\n        let index = copy.findIndex(elem => elem.id === id)\r\n\r\n        copy.splice(index, 1)\r\n        setList(copy)\r\n    }\r\n\r\n\r\n\r\n    async function getDataFromDB() {\r\n        if (params.idTest) {\r\n            await fetch(`/create/${params.name}/${params.idTest}`)\r\n                .then(r => r.json())\r\n                .then(r => {\r\n                    setList(r.data)\r\n                    setNameTest(r.nameTest)\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getDataFromDB()\r\n        console.log(data)\r\n        /* alert('Убедитесь, чтобы все поля были заполнены. Иначе тестируемый будет выбирать верный ответ между пустым полем и пустым полем)') */\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    return (<>\r\n        <form method=\"post\" onKeyDown={(e) => { if (e.key === 'Enter') e.preventDefault() }}>\r\n            <input className={FormCSS.none} readOnly type=\"text\" name=\"id\" value={nanoid(6)} /> {/* display: none. Ставит айдишник данным для БД */}\r\n\r\n\r\n            <input type=\"text\" name=\"nameTest\" className={FormCSS.inp_name} placeholder=\"Введите название теста\" autoComplete=\"off\" defaultValue={nameTest} />\r\n\r\n            {list.map((elem, index) => {\r\n                return <QUEForm\r\n                    key={index}\r\n                    elemFromState={elem}\r\n                    number={index}\r\n                    remove={remove}\r\n                    last={index === list.length - 1}\r\n                    add={add}\r\n\r\n                    mainList={list}\r\n                    mainSetList={setList}\r\n                />\r\n            })}\r\n        </form>\r\n    </>)\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}