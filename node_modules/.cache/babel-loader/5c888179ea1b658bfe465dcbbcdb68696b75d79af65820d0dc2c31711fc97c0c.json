{"ast":null,"code":"var _jsxFileName = \"D:\\\\javascript\\\\express-react-app\\\\client\\\\src\\\\resolution\\\\ResolutionCheck.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport ResolCSS from '../styles/Resolution.module.css';\nimport { useParams, useSearchParams } from \"react-router-dom\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ResolutionCheck() {\n  _s();\n  let [data, setData] = useState();\n  let param = useParams();\n  console.log(param, 'param');\n  async function getData() {\n    let data = await fetch(`/resolution/${param.id}/check`).then(r => r.json()).then(r => r);\n    setData(data);\n    console.log(data);\n  }\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: data ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"load\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(ResolutionCheck, \"I7eeXstVqZyeXNUR95ckZfjgzBM=\", false, function () {\n  return [useParams];\n});\n_c = ResolutionCheck;\nvar _c;\n$RefreshReg$(_c, \"ResolutionCheck\");","map":{"version":3,"names":["React","useEffect","useState","ResolCSS","useParams","useSearchParams","Fragment","_Fragment","jsxDEV","_jsxDEV","ResolutionCheck","_s","data","setData","param","console","log","getData","fetch","id","then","r","json","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/javascript/express-react-app/client/src/resolution/ResolutionCheck.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport ResolCSS from '../styles/Resolution.module.css'\r\nimport { useParams, useSearchParams } from \"react-router-dom\";\r\n\r\nexport default function ResolutionCheck() {\r\n    let [data, setData] = useState()\r\n    let param = useParams()\r\n    console.log(param, 'param')\r\n    async function getData() {\r\n        let data = await fetch(`/resolution/${param.id}/check`).then(r => r.json()).then(r => r)\r\n        setData(data)\r\n        console.log(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n\r\n\r\n    return <>\r\n        {data ? <>\r\n\r\n\r\n            {/* <div className={ResolCSS.res}>\r\n\r\n                <p className={ResolCSS.resP}>Вопрос</p>\r\n                <p>Ваш ответ: ваываываываы<span className={ResolCSS.comments}> // верно</span></p>\r\n\r\n            </div>\r\n\r\n            <div className={ResolCSS.res}>\r\n\r\n                <p className={ResolCSS.resP}>Вопрос</p>\r\n                <p>Ваш ответ: ваываываываы <span className={ResolCSS.comments}>// неверно</span></p>\r\n                <p className={ResolCSS.comments}>// верно: \"этот ответ\"</p>\r\n\r\n            </div> */}\r\n        </>\r\n            :\r\n            <div>load</div>\r\n        }\r\n    </>\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,QAAQ,MAAM,iCAAiC;AACtD,SAASC,SAAS,EAAEC,eAAe,QAAQ,kBAAkB;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAE9D,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACtC,IAAI,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC;EAChC,IAAIY,KAAK,GAAGV,SAAS,CAAC,CAAC;EACvBW,OAAO,CAACC,GAAG,CAACF,KAAK,EAAE,OAAO,CAAC;EAC3B,eAAeG,OAAOA,CAAA,EAAG;IACrB,IAAIL,IAAI,GAAG,MAAMM,KAAK,CAAC,eAAeJ,KAAK,CAACK,EAAE,QAAQ,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC;IACxFR,OAAO,CAACD,IAAI,CAAC;IACbG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;EACrB;EAEAX,SAAS,CAAC,MAAM;IACZgB,OAAO,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAIN,oBAAOR,OAAA,CAAAF,SAAA;IAAAgB,QAAA,EACFX,IAAI,gBAAGH,OAAA,CAAAF,SAAA,mBAiBN,CAAC,gBAECE,OAAA;MAAAc,QAAA,EAAK;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC,gBAErB,CAAC;AACP;AAAChB,EAAA,CAvCuBD,eAAe;EAAA,QAEvBN,SAAS;AAAA;AAAAwB,EAAA,GAFDlB,eAAe;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}