{"ast":null,"code":"var _jsxFileName = \"D:\\\\javascript\\\\express-react-app\\\\client\\\\src\\\\FormCreate\\\\Form.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { nanoid } from 'nanoid';\nimport FormCSS from '../styles/Form.module.css';\nimport QUEForm from \"./QUEForm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Form() {\n  _s();\n  let params = useParams();\n  const [list, setList] = useState();\n  const [extraInfo, setExtraInfo] = useState();\n  useEffect(() => {\n    if (getDataFromDB()) {\n      let dataForCreate = JSON.parse(localStorage.getItem('dataForCreate'));\n      !dataForCreate ? setList([{\n        id: nanoid(10),\n        type: 'radio',\n        text: '',\n        answerTrue: [[nanoid(3), '']],\n        answerFalse: [[nanoid(3), '']]\n      }]) : setList(dataForCreate);\n      let dataForCreateExtraInfo = JSON.parse(localStorage.getItem('dataForCreateExtraInfo'));\n      !dataForCreateExtraInfo ? setExtraInfo({\n        nameTest: '',\n        privat: false\n      }) : setExtraInfo(dataForCreateExtraInfo);\n      console.log(dataForCreateExtraInfo);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  console.log(localStorage.getItem('dataForCreateExtraInfo'));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      method: \"post\",\n      onKeyDown: e => {\n        if (e.key === 'Enter') e.preventDefault();\n      },\n      children: [extraInfo.nameTest || extraInfo.nameTest === '' ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"nameTest\",\n        className: FormCSS.inp_name,\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u0441\\u0442\\u0430\",\n        autoComplete: \"off\",\n        value: extraInfo.nameTest,\n        onChange: e => {\n          let copy = {\n            ...extraInfo\n          };\n          copy.nameTest = e.target.value;\n          setExtraInfo(copy);\n          if (!params.idTest) localStorage.setItem('dataForCreateExtraInfo', JSON.stringify(extraInfo));\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this) : 'qwe', list ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: list.map((elem, index) => {\n          return /*#__PURE__*/_jsxDEV(QUEForm, {\n            elemFromState: elem,\n            number: index,\n            remove: remove,\n            last: index === list.length - 1,\n            add: add,\n            mainList: list,\n            mainSetList: setList,\n            extraInfo: extraInfo,\n            setExtraInfo: setExtraInfo\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false) : \"ывлмыдлвтм\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n  /* \r\n      {\r\n          nameTest: name: str,\r\n          privat: 'on'||undefinde,\r\n          [num + 'textQUE']: textQuestion: str,\r\n          [num + 'type']: type: 'radio' || 'checkbox' || 'text',\r\n          [num + ans: 'answerTrue' || 'answerFalse']: answer: str || str[],\r\n          ...\r\n      }\r\n  */\n\n  async function getDataFromDB() {\n    if (params.idTest) {\n      await fetch(`/create/${params.name}/${params.idTest}`).then(r => r.json()).then(r => {\n        setList(r.data);\n        setExtraInfo({\n          nameTest: r.nameTest,\n          privat: r.privat\n        });\n      }).catch(err => console.log(err));\n      return false;\n    }\n    return true;\n  }\n  function add() {\n    let copy = [...list];\n    copy = [...copy, {\n      id: nanoid(10),\n      type: 'radio',\n      text: '',\n      answerTrue: [[nanoid(3), '']],\n      answerFalse: [[nanoid(3), '']]\n    }];\n    setList(copy);\n    if (!params.idTest) localStorage.setItem('dataForCreate', JSON.stringify(copy));\n  }\n  function remove(id) {\n    let copy = [...list];\n    let index = copy.findIndex(elem => elem.id === id);\n    copy.splice(index, 1);\n    setList(copy);\n    if (!params.idTest) localStorage.setItem('dataForCreate', JSON.stringify(copy));\n  }\n}\n_s(Form, \"+ZS91iwwa/vLS8Stm4SJ+qxL0G0=\", false, function () {\n  return [useParams];\n});\n_c = Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","useEffect","useParams","nanoid","FormCSS","QUEForm","jsxDEV","_jsxDEV","Fragment","_Fragment","Form","_s","params","list","setList","extraInfo","setExtraInfo","getDataFromDB","dataForCreate","JSON","parse","localStorage","getItem","id","type","text","answerTrue","answerFalse","dataForCreateExtraInfo","nameTest","privat","console","log","children","method","onKeyDown","e","key","preventDefault","name","className","inp_name","placeholder","autoComplete","value","onChange","copy","target","idTest","setItem","stringify","fileName","_jsxFileName","lineNumber","columnNumber","map","elem","index","elemFromState","number","remove","last","length","add","mainList","mainSetList","fetch","then","r","json","data","catch","err","findIndex","splice","_c","$RefreshReg$"],"sources":["D:/javascript/express-react-app/client/src/FormCreate/Form.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport FormCSS from '../styles/Form.module.css'\r\nimport QUEForm from \"./QUEForm\";\r\n\r\nexport default function Form() {\r\n    let params = useParams()\r\n\r\n    const [list, setList] = useState()\r\n    const [extraInfo, setExtraInfo] = useState()\r\n\r\n    useEffect(() => {\r\n        if (getDataFromDB()) {\r\n\r\n            let dataForCreate = JSON.parse(localStorage.getItem('dataForCreate'))\r\n            !dataForCreate ? setList([{\r\n                id: nanoid(10),\r\n                type: 'radio',\r\n                text: '',\r\n                answerTrue: [\r\n                    [nanoid(3), '']\r\n                ],\r\n                answerFalse: [\r\n                    [nanoid(3), '']\r\n                ],\r\n            }]) : setList(dataForCreate)\r\n\r\n\r\n            let dataForCreateExtraInfo = JSON.parse(localStorage.getItem('dataForCreateExtraInfo'))\r\n            !dataForCreateExtraInfo ? setExtraInfo({\r\n                nameTest: '',\r\n                privat: false\r\n            }) : setExtraInfo(dataForCreateExtraInfo)\r\n\r\n\r\n            console.log(dataForCreateExtraInfo)\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n    console.log(localStorage.getItem('dataForCreateExtraInfo'))\r\n    return (<>\r\n        <form method=\"post\" onKeyDown={(e) => { if (e.key === 'Enter') e.preventDefault() }}>\r\n\r\n            {extraInfo.nameTest || extraInfo.nameTest === '' ?\r\n                <input type=\"text\" name=\"nameTest\" className={FormCSS.inp_name} placeholder=\"Введите название теста\" autoComplete=\"off\" value={extraInfo.nameTest} onChange={(e) => {\r\n                    let copy = { ...extraInfo }\r\n                    copy.nameTest = e.target.value\r\n                    setExtraInfo(copy)\r\n                    if (!params.idTest) localStorage.setItem('dataForCreateExtraInfo', JSON.stringify(extraInfo))\r\n                }} />\r\n                :\r\n                'qwe'\r\n            }\r\n\r\n            {list ? <>\r\n                {list.map((elem, index) => {\r\n                    return <QUEForm\r\n                        key={index}\r\n                        elemFromState={elem}\r\n                        number={index}\r\n                        remove={remove}\r\n                        last={index === list.length - 1}\r\n                        add={add}\r\n\r\n                        mainList={list}\r\n                        mainSetList={setList}\r\n                        extraInfo={extraInfo}\r\n                        setExtraInfo={setExtraInfo}\r\n                    />\r\n                })}\r\n            </>\r\n                :\r\n                \"ывлмыдлвтм\"\r\n            }\r\n\r\n        </form>\r\n    </>)\r\n    /* \r\n        {\r\n            nameTest: name: str,\r\n            privat: 'on'||undefinde,\r\n            [num + 'textQUE']: textQuestion: str,\r\n            [num + 'type']: type: 'radio' || 'checkbox' || 'text',\r\n            [num + ans: 'answerTrue' || 'answerFalse']: answer: str || str[],\r\n            ...\r\n        }\r\n    */\r\n\r\n\r\n    async function getDataFromDB() {\r\n        if (params.idTest) {\r\n            await fetch(`/create/${params.name}/${params.idTest}`)\r\n                .then(r => r.json())\r\n                .then(r => {\r\n                    setList(r.data)\r\n                    setExtraInfo({\r\n                        nameTest: r.nameTest,\r\n                        privat: r.privat\r\n                    })\r\n                })\r\n                .catch(err => console.log(err))\r\n            return false\r\n        }\r\n        return true\r\n    }\r\n\r\n\r\n    function add() {\r\n        let copy = [...list]\r\n\r\n        copy = [...copy,\r\n        {\r\n            id: nanoid(10),\r\n            type: 'radio',\r\n            text: '',\r\n            answerTrue: [\r\n                [nanoid(3), '']\r\n            ],\r\n            answerFalse: [\r\n                [nanoid(3), '']\r\n            ],\r\n        }\r\n        ]\r\n        setList(copy)\r\n        if (!params.idTest) localStorage.setItem('dataForCreate', JSON.stringify(copy))\r\n    }\r\n\r\n    function remove(id) {\r\n        let copy = [...list]\r\n        let index = copy.findIndex(elem => elem.id === id)\r\n\r\n        copy.splice(index, 1)\r\n        setList(copy)\r\n        if (!params.idTest) localStorage.setItem('dataForCreate', JSON.stringify(copy))\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}