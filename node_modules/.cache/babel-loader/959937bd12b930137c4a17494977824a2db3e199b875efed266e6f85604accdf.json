{"ast":null,"code":"var _jsxFileName = \"D:\\\\javascript\\\\express-react-app\\\\client\\\\src\\\\Form\\\\Form.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { nanoid } from 'nanoid';\nimport FormCSS from '../styles/Form.module.css';\nimport QUEForm from \"./QUEForm\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Form() {\n  _s();\n  const [list, setList] = useState([{\n    id: nanoid(5),\n    type: 'radio',\n    text: '',\n    answerTrue: [],\n    answerFalse: []\n  }]);\n  /* const [list, setList] = useState({\r\n      id: qwe,\r\n      type: 'type',\r\n      text: 'qwe',\r\n      answerTrue: [],\r\n      answerFalse: [],\r\n  }) */\n  const [count, setCount] = useState(1);\n  function add() {\n    let copy = [...list];\n    copy = [...copy, {\n      id: nanoid(5),\n      type: 'radio',\n      text: '',\n      answerTrue: [],\n      answerFalse: []\n    }];\n    setList(copy);\n  }\n  function remove(id) {\n    let copy = [...list];\n    let index = copy.findIndex(elem => elem === id);\n    copy.splice(index, 1);\n    setList(copy);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      method: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: FormCSS.none,\n        readOnly: true,\n        type: \"text\",\n        name: \"id\",\n        value: nanoid(6)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"nameTest\",\n        className: FormCSS.inp_name,\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u0441\\u0442\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), list.map((elem, index) => {\n        return /*#__PURE__*/_jsxDEV(QUEForm, {\n          elemFromState: elem,\n          number: index,\n          remove: remove,\n          last: index === list.length - 1 ? true : false,\n          add: add,\n          mainList: list,\n          mainSetList: setList\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 24\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n/* \r\n    function add() {\r\n        let copy = [...list]\r\n        setCount(count + 1)\r\n        copy.push(count)\r\n        setList(copy)\r\n    } \r\n*/\n_s(Form, \"LCv/ivKGIvy0eIpDgRwn3vWAL7M=\");\n_c = Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","nanoid","FormCSS","QUEForm","jsxDEV","_jsxDEV","Fragment","_Fragment","Form","_s","list","setList","id","type","text","answerTrue","answerFalse","count","setCount","add","copy","remove","index","findIndex","elem","splice","children","method","className","none","readOnly","name","value","fileName","_jsxFileName","lineNumber","columnNumber","inp_name","placeholder","map","elemFromState","number","last","length","mainList","mainSetList","_c","$RefreshReg$"],"sources":["D:/javascript/express-react-app/client/src/Form/Form.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { nanoid } from 'nanoid';\r\n\r\nimport FormCSS from '../styles/Form.module.css'\r\nimport QUEForm from \"./QUEForm\";\r\n\r\nexport default function Form() {\r\n    const [list, setList] = useState([\r\n        {\r\n            id: nanoid(5),\r\n            type: 'radio',\r\n            text: '',\r\n            answerTrue: [],\r\n            answerFalse: [],\r\n        }\r\n    ])\r\n    /* const [list, setList] = useState({\r\n        id: qwe,\r\n        type: 'type',\r\n        text: 'qwe',\r\n        answerTrue: [],\r\n        answerFalse: [],\r\n    }) */\r\n    const [count, setCount] = useState(1)\r\n\r\n    function add() {\r\n        let copy = [...list]\r\n\r\n        copy = [...copy,\r\n        {\r\n            id: nanoid(5),\r\n            type: 'radio',\r\n            text: '',\r\n            answerTrue: [],\r\n            answerFalse: [],\r\n        }\r\n        ]\r\n        setList(copy)\r\n    }\r\n    function remove(id) {\r\n        let copy = [...list]\r\n        let index = copy.findIndex(elem => elem === id)\r\n\r\n        copy.splice(index, 1)\r\n        setList(copy)\r\n    }\r\n\r\n    return (<>\r\n        <form method=\"post\">\r\n            <input className={FormCSS.none} readOnly type=\"text\" name=\"id\" value={nanoid(6)} /> {/* display: none. Ставит айдишник данным для БД */}\r\n\r\n\r\n            <input type=\"text\" name=\"nameTest\" className={FormCSS.inp_name} placeholder=\"Введите название теста\" />\r\n\r\n            {list.map((elem, index) => {\r\n                return <QUEForm\r\n                    key={index}\r\n                    elemFromState={elem}\r\n                    number={index}\r\n                    remove={remove}\r\n                    last={index === list.length - 1 ? true : false}\r\n                    add={add}\r\n\r\n                    mainList={list}\r\n                    mainSetList={setList}\r\n                />\r\n            })}\r\n        </form>\r\n    </>)\r\n}\r\n\r\n\r\n/* \r\n    function add() {\r\n        let copy = [...list]\r\n        setCount(count + 1)\r\n        copy.push(count)\r\n        setList(copy)\r\n    } \r\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}